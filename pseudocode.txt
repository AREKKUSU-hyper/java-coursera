the training text is "this is a test yes this is a test."

-begin with first 'key' character, "t"
-add "t" to the hashmap if it doesn't exist
-get the character that follows "t"
-add "h" to the arraylist for the key value "t"
-move on to the next 'key' character, "h"
-add "h" to the hashmap if it doesn't exist
-get the character that follows "h"
-add "i" to the arraylist for the key value "h"
-move on to the next 'key' character, "i"
-add "i" to the hashmap if it doesn't exist
-get the character that follows "i"
-add "s" to the arraylist for the key value "i"
-move on to the next 'key' character, " "
-add " " to the hashmap if it doesn't exist
-get the character that follows " "
-add "i" to the arraylist for the key value " "

The way it works now:
-getRandomText(int numChars) is called
-an empty StringBuilder is created for output
-an index location is generated at random based upon the training text length minus (markov order + 1)
-a 'key' is taken from the substring of the index location and index location + markov order
-the StringBuilder appends this 'key' to the output
-a loop iterates from 0 to numChars minus order
-for each iteration, a new arraylist is created that calls getFollows and passes the 'key'
-getFollows scans through the entire text and adds each character that follows 'key'
-a character in the arraylist is picked at random and appended to StringBuilder
-the next 'key' is composed of a substring of the previous key with the first character removed and the character that was just appended to StringBuilder

The way it could work with a hashmap:
-getRandomText(int numChars) is called
-an empty StringBuilder is created for output
-an index location is generated at random based upon the training text length minus (markov order + 1)
-a 'key' is taken from the substring of the index location and index location + markov order
-the StringBuilder appends this 'key' to the output
-a loop iterates from 0 to numChars minus order
-for each iteration, a getFollows is called for 'key'
-getFollows checks if an arraylist for 'key' has already been created
-if no arraylist exists for 'key', getFollows scans through the entire text and adds an arraylist of characters that follow 'key'
-a character in the arraylist is picked at random and appended to StringBuilder
-the next 'key' is composed of a substring of the previous key with the first character removed and the character that was just appended to StringBuilder
